#!/usr/bin/env ruby -w -Ilib

require 'parser'
require 'defs'
require 'prelude'

def printenv(program)
  if program.nil?
    "no program"
  else
    begin
      program.flatten.map(&:identifier).map(&:name).join(', ')
    rescue => _
      "error getting env"
    end
  end
end

def run_eval(fun, programs)
  base, env = programs
  base = base.flatten
  env = env.flatten
  body = fun.body

  case body
  when NativeRubyCode
    body.body.call([base,env], fun)
  when NumberType
    body
  when StringType
    body.value
  when FunCall
    target = [base, env].flatten.
      find { |f| f.identifier == body.identifier }

    if target.nil?
      raise "Can't find function #{body.identifier} (from #{fun.identifier}).\nAvail: #{program.map(&:identifier).join(', ')}"
    end

    args = target.args

    top_vars   = base.map(&:identifier)
    local_vars = env.map(&:identifier)

    if ENV['DEBUG']
      puts "WARNING(#{body.identifier}): top_vars was : #{top_vars.map(&:name)}"
      puts "WARNING(#{body.identifier}): local_vars was : #{local_vars.map(&:name)}"
    end

    if body.args.value.count < args.value.count
      raise 'Currying functions is not supported (yet)'
    end

    new_env = body.args.value.zip(args.value).map do |val, arg_def|
      param = FunDef.new(nil,FunCallArgs.new([]),val)

      FunDef.new(
        arg_def,
        FunCallArgs.new([]),
        run_eval(param, [base, env]))
    end

    if ENV['DEBUG']
      puts "DEBUG: Adding to env for #{body.identifier}: #{new_env.map(&:identifier)}"
      [base, env].flatten.each_with_index do |s, i|
        puts "#{i}: #{s&.identifier}, #{s&.body}"
      end
      puts "END DEBUG"
    end

    fun = [base,env].flatten.find { |f| f.identifier == body.identifier }

    if fun.nil?
      raise FunctionNotFound, "Can't find function: #{body.identifier}"
    end

    run_eval(fun, [base, new_env])
  else
    raise UnsupportedType, "#{body.class} called in #{fun}"
  end
end


DOMAINS = {
  "Int" => NumberType,
  "String" => StringType,
}
def apply_types(program)
  tds = program.select { |s| s.is_a? TypeDef }
  sts = program.select { |s| s.is_a? FunDef }
  tds.each do |td|
    sts.
      find { |fun| (fun.identifier.name == td.identifier) && fun.is_a?(FunDef) }.
      tap do |fun_def|
        fun_def.domains = Domains.new td.domains.map { |a| Domain.new DOMAINS.fetch(a) }
      end
  end

  entry = sts.find { |fun| fun.identifier.name == ENTRY_POINT && fun.is_a?(FunDef) }
  run_types(entry, [sts, []])
  sts
end

def run_types(fun, programs)
  raise 'No fun' if fun.nil?
  base, env = programs
  base = base.flatten
  env = env.flatten

  case fun
  when NativeRubyCode
    fun.domains
  when NumberType
    Domains.new(Array(fun.class).map { |c| Domain.new c })
  when StringType
    Domains.new(Array(fun.class).map { |c| Domain.new c })
  when FunDef
    target = [base, env].flatten.
      find { |f| f.identifier == fun.identifier }

    # Check existing typing!
    target.domains = run_types(target.body, [base, env])

    target.domains
  when FunCall
    target = [base, env].flatten.
      find { |f| f.identifier == fun.identifier }

    if target.nil?
      raise FunctionNotFound, <<-EOS
Missing function

ERROR: Can't find function \"#{fun.identifier}\" in the environment.

HINT: Available functions: #{base.map(&:identifier).join(', ')}

EOS
    end

    # Explore arguments
    actual_args =
      fun.args.value.
      map do |arg|
        run_types(arg, [base,env]).map do |types|
          if types.nil?
            Domains.new([])
          else
            Domains.new types
          end
        end.tap do |domains|
          if arg.is_a?(Identifier)
            arg_tgt = [base, env].flatten.
              find { |f| f.identifier == fun.identifier }
            arg_tgt.domains = domains
          end
        end
      end.flatten.
      inject([]) { |a,b| a << b.values }.flatten
    actual_args = Domains.new actual_args

    types = run_types(target, [base, env])

    applied_types = types.values[0..actual_args.count - 1]
    applied_types = Domains.new applied_types

    actual_types = types.values[actual_args.count..-1]
    actual_types = Domains.new actual_types

    target.domains = types

    if (actual_args.values.count > 0) && (actual_args != actual_types)
      raise TypeMistmatchError, """Type Mismatch!

ERROR: Couldn't resolve proper type for method \"#{fun.identifier}\"

HINT:
           Got: #{actual_args}
Expected types: #{actual_types}

"""
    end

    applied_types
  else
    raise UnsupportedType, "#{body.class} called in #{fun}"
  end
end

def apply_prelude(program)
  Prelude.apply(program)
end

def banner
  puts(<<EOS)
USAGE: ./fr <your source file>

This will run your FR file.
EOS
end

EntryPointNotFound = Class.new RuntimeError
FunctionNotFound   = Class.new RuntimeError
UnsupportedType    = Class.new RuntimeError
TypeMistmatchError = Class.new RuntimeError

parser = Parser.new
ENTRY_POINT = "main"

file = ARGV[0]
if file
  # parse and type-check
  program = parser.parse(File.read(file).strip)
  program = apply_prelude(program)
  program = apply_types(program)

  if ENV['DEBUG'] # check typing
    puts program.map(&:to_s)
  else # run the program
    entry = program.find { |fun| fun.identifier.name == ENTRY_POINT && fun.is_a?(FunDef) }

    stack = [[program], []]

    if entry.nil?
      raise EntryPointNotFound, "Couldn't find entry point: #{ENTRY_POINT}"
    end
    puts "\n#{run_eval(entry, stack)}"
  end
else
  banner
end

# vim: set ft=ruby:
